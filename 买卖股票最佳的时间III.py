"""给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。示例 1:输入: [3,3,5,0,0,3,1,4]输出: 6解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。示例 2:输入: [1,2,3,4,5]输出: 4解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。示例 3:输入: [7,6,4,3,1]输出: 0解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。"""import sysclass Solution:    def maxProfit(self, prices):        """        :type prices: List[int]        :rtype: int        """        buy1 = buy2 = pow(2,31)        bene1 = bene2 = 0        for i in prices:            if buy1 > i:                buy1 = i            if bene1 < i-buy1:                bene1 = i-buy1                print(i,bene1)            if buy2 > i-bene1:                buy2 = i-bene1                print(buy2)            if bene2 < i-buy2:                bene2 = i-buy2                print(bene2)        return bene2print(Solution().maxProfit([3,3,5,0,0,3,1,4]))class Solution2:    def maxProfit(self, prices):        """        :type prices: List[int]        :rtype: int        """        first_buy, first_sell, second_buy, second_sell = -sys.maxsize, 0, -sys.maxsize, 0        third_buy = -sys.maxsize        third_sell = 0        for price in prices:            first_buy = max(first_buy, -price)  # 第一次买入手上的钱            first_sell = max(first_sell, price+first_buy)  # 第一次卖出手上的钱            second_buy = max(second_buy, first_sell-price)  # 第二次买入手上的钱            second_sell = max(second_sell, price+second_buy)  # 第二次卖出手上的钱            third_buy = max(third_buy,second_sell-price)            third_sell = max(third_sell,price+third_buy)        return third_sellprint(Solution2().maxProfit([1,8,4,10,8,0,5,9,10]))