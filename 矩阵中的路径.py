"""请设计一个函数,用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径,路径是可以从矩阵中的任意一个格子开始,每一步可以在矩阵中向左,向右,向上,向下移动一个格子.如果一条路径经过了矩阵中的某一个格子,则之后不能再次进入这个格子.列如a b c e s f c s a d c e 这样的3*4矩阵包含一条字符串的bcced的路径,但是矩阵中不包含'abcb'路径,因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后,路径不能再次进入该格子.a b c es f c sa d c e"""# 解题思路,回溯法class Solution:    def fun(self,arr,rows,cols,string_path):            if  len(arr) <= 0 or rows<1 or cols <1 or string_path == None :                return  False            visit_arr = [False] * rows * cols            # 行走的步数            path_step = 0            for row in range(rows):                for col in range(cols):                    # 满足则代表走通了                    if  self.haspath(arr,rows,cols,row,col,string_path,path_step,visit_arr):                              return  True            return  False    def haspath(self,arr,rows,cols,row,col,string_path,path_step,visit_arr):        if len(string_path) == path_step :            return  True        hasPath = False        # 条件是 行,列大于0,具体行,列位置坐标小于行列数,arr[row*cols+col]是具体位置的下标对应的值 要等于要找的字符串的值        #  并且visit_arr[位置]没走过        if row >=0 and row < rows and col >=0 and col < rows \            and  arr[row*cols+col] == string_path[path_step] and not visit_arr [row * cols + col]:            # 步数加1            path_step += 1            # 走完一个位置,改变位置状态,True表示走过了            visit_arr[row * cols + col] = True            # 代表上下左右            hasPath = self.haspath(arr,rows,cols,row,col-1,string_path,path_step,visit_arr) or \                      self.haspath(arr,rows,cols,row,col+1,string_path,path_step,visit_arr) or \                      self.haspath(arr,rows,cols,row-1,col,string_path,path_step,visit_arr) or \                      self.haspath(arr,rows,cols,row+1,col,string_path,path_step,visit_arr)            # 如果走不通,回溯,退到原来的位置            if not hasPath :                path_step -= 1                #并且改变原来位置的状态                visit_arr[row*cols + col] = False        return  hasPathprint(Solution().fun(list('abcesfcsadce'),3,4,list('ag')))